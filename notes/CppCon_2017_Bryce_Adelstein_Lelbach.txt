1.	Structured bindings
	  std::tuple
	  std::tie std::bind 
	  Destructurable types
2.	Range 
3.	Selection sequence with initializers

	   With if statement it is possible to initialize
           if (init; condition)

4.	Decrypt the below snippet

/--------------------------/
template <typename Key, typename F>
void emplace_or_throw(std::set<Key>& m, Key&& k, F f)
{
  if (auto [it, s] = m.emplace(std::forward<Key>(k)); !s)
    throw /* ... */
  else
    f(*it);
}
/-------------------------/
 
5.	SFINAE
6.      Discreminated Union

	Substitution failure is not an error (SFINAE) refers to a situation in C++ where an invalid substitution of template parameters is not in itself an error.
	is_constructible, 
	enable_if
 
6.	Type traits http://en.cppreference.com/w/cpp/header/type_traits 
 	  std::is_constructible, 
	  std::is_trivially_constructible, 
	  std::is_nothrow_constructible
7	Iterators
 	  std::input_iterator_tag, 
	  std::output_iterator_tag, 
	  std::forward_iterator_tag,
	  std::bidirectional_iterator_tag, 
	  std::random_access_iterator_tag
          std::iterator_traits
 
8.	How I is accessed inside get ?


variant visitor


template <unsigned N>                                                         
std::string repeat(std::string_view s)
{
    std::string tmp;
    for (unsigned i = 0; i != N; ++i)
      tmp += s;
    return tmp;
}

template <unsigned N>
struct multiplier_visitor
{
  void operator()(std::string& t) const        { t = repeat(t); }
  void operator()(int& t) const                { t = t * N; }
  void operator()(std::array<int, 2>& t) const { t = {{t[0] * N, t[1] * N}}; }
};



std::variant<std::string, int, std::array<int, 2>> v;
// Default state is the first type, e.g. std::string.

v = 21;
std::visit(multiplier_visitor<2>{}, v); // v == 42. 

v = "Ha";
std::visit(multiplier_visitor<3>{}, v); // v == "HaHaHa".

template <unsigned N>                                                         
std::string repeat(std::string_view s);



std::variant<std::string, int, std::array<int, 2>> v = // ...

std::visit(
  [](auto& t)
  {
    constexpr unsigned N = 10;

    using T = std::decay_t<decltype(t)>;

    if constexpr      (std::is_same_v<T, std::string>)
      t = repeat(t);
    else if constexpr (std::is_same_v<T, int>)
      t = t * N;
    else if constexpr (std::is_same_v<T, std::array<int, 2>>)
      t = {{t[0] * N, t[1] * N}};
    else
      static_assert(false);
  }, v);




template <unsigned N>                                                         
std::string repeat(std::string_view s);

template <typename... Ts>
struct overloaded : Ts...
{
    using Ts::operator()...;
};

template <typename... Ts>
overloaded(Ts...) -> overloaded<Ts...>;



std::variant<std::string, int, std::array<int, 2>> v = // ...

constexpr unsigned N = 10;

std::visit(
  overloaded{
    [=](std::string& t)        { t = repeat(t); },
    [=](int& t)                { t = t * N; },
    [=](std::array<int, 2>& t) { t = {{t[0] * N, t[1] * N}}; }
  }, v);



--
  
  template <typename Leaf>
struct binary_tree;

template <typename Leaf>
struct binary_tree_branch
{
  std::shared_ptr<binary_tree<leaf> > left;
  std::shared_ptr<binary_tree<leaf> > right;
};

template <typename Leaf>
struct binary_tree
{
  std::variant<Leaf, binary_tree_branch<leaf> > value;
	
	
std::any

9. variant
10. discriminated union c++
11. Access uses the visitor pattern
12. std::decay_t
13. std::visit

